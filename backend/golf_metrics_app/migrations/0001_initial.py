# Generated by Django 4.2.21 on 2025-05-24 04:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Golfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('golfer_id', models.CharField(help_text='Unique golfer identifier', max_length=20, unique=True)),
                ('first_name', models.CharField(help_text='First name', max_length=100)),
                ('last_name', models.CharField(help_text='Last name', max_length=100)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=20, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text='Gender', max_length=1, null=True)),
                ('handicap', models.DecimalField(blank=True, decimal_places=1, help_text='Golf handicap (-10 to 54)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(-10), django.core.validators.MaxValueValidator(54)])),
                ('skill_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('professional', 'Professional')], default='intermediate', help_text='Skill level', max_length=20)),
                ('preferred_tee', models.CharField(blank=True, help_text="Preferred tee (e.g., Championship, Men's, Women's)", max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether golfer is currently active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the golfer', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Golfer',
                'verbose_name_plural': 'Golfers',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Tournament name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Tournament description', null=True)),
                ('start_date', models.DateField(help_text='Tournament start date')),
                ('end_date', models.DateField(help_text='Tournament end date')),
                ('location', models.CharField(blank=True, help_text='Tournament location', max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether tournament is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
                'ordering': ['-start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Shot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shot_number', models.PositiveIntegerField(help_text='Sequential shot number')),
                ('hole_number', models.PositiveIntegerField(blank=True, help_text='Hole number (1-18)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('shot_type', models.CharField(choices=[('drive', 'Drive'), ('approach', 'Approach'), ('chip', 'Chip'), ('putt', 'Putt'), ('bunker', 'Bunker'), ('other', 'Other')], default='drive', help_text='Type of shot', max_length=20)),
                ('club_used', models.CharField(blank=True, choices=[('driver', 'Driver'), ('3wood', '3 Wood'), ('5wood', '5 Wood'), ('hybrid', 'Hybrid'), ('3iron', '3 Iron'), ('4iron', '4 Iron'), ('5iron', '5 Iron'), ('6iron', '6 Iron'), ('7iron', '7 Iron'), ('8iron', '8 Iron'), ('9iron', '9 Iron'), ('pw', 'Pitching Wedge'), ('sw', 'Sand Wedge'), ('lw', 'Lob Wedge'), ('putter', 'Putter')], help_text='Club used for the shot', max_length=20, null=True)),
                ('ball_speed', models.DecimalField(blank=True, decimal_places=2, help_text='Ball speed in mph', max_digits=6, null=True)),
                ('club_head_speed', models.DecimalField(blank=True, decimal_places=2, help_text='Club head speed in mph', max_digits=6, null=True)),
                ('launch_angle', models.DecimalField(blank=True, decimal_places=2, help_text='Launch angle in degrees', max_digits=5, null=True)),
                ('spin_rate', models.PositiveIntegerField(blank=True, help_text='Spin rate in RPM', null=True)),
                ('carry_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Carry distance in yards', max_digits=6, null=True)),
                ('total_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Total distance in yards', max_digits=6, null=True)),
                ('side_angle', models.DecimalField(blank=True, decimal_places=2, help_text='Side angle in degrees', max_digits=5, null=True)),
                ('is_simulated', models.BooleanField(default=False, help_text='Whether this shot is simulated or from launch monitor')),
                ('launch_monitor_id', models.CharField(blank=True, help_text='Launch monitor device identifier', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the shot', null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the shot was taken')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('golfer', models.ForeignKey(blank=True, help_text='Golfer who took this shot (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shots', to='golf_metrics_app.golfer')),
            ],
            options={
                'verbose_name': 'Shot',
                'verbose_name_plural': 'Shots',
                'ordering': ['-timestamp', 'shot_number'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_number', models.PositiveIntegerField(help_text='Auto-generated group number')),
                ('nickname', models.CharField(blank=True, help_text='Optional display name for the group', max_length=100, null=True)),
                ('max_golfers', models.PositiveIntegerField(default=4, help_text='Maximum number of golfers allowed in this group', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tournament', models.ForeignKey(blank=True, help_text='Tournament this group belongs to (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', to='golf_metrics_app.tournament')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['group_number'],
                'unique_together': {('tournament', 'group_number')},
            },
        ),
        migrations.AddField(
            model_name='golfer',
            name='group',
            field=models.ForeignKey(blank=True, help_text='Group this golfer belongs to (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='golfers', to='golf_metrics_app.group'),
        ),
    ]
