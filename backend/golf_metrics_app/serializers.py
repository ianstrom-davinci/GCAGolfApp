from rest_framework import serializers
from django.db import models
from .models import Tournament, Group, Golfer, Shot


class TournamentSerializer(serializers.ModelSerializer):
    """Serializer for Tournament model"""
    total_groups = serializers.IntegerField(read_only=True)
    total_golfers = serializers.IntegerField(read_only=True)

    class Meta:
        model = Tournament
        fields = [
            'id', 'name', 'description', 'start_date', 'end_date',
            'location', 'is_active', 'total_groups', 'total_golfers',
            'created_at', 'updated_at'
        ]
        read_only_fields = ['created_at', 'updated_at']

    def validate(self, data):
        """Validate that end_date is not before start_date"""
        if data.get('end_date') and data.get('start_date'):
            if data['end_date'] < data['start_date']:
                raise serializers.ValidationError(
                    "End date cannot be before start date."
                )
        return data


class GroupSerializer(serializers.ModelSerializer):
    """Serializer for Group model"""
    tournament_name = serializers.CharField(source='tournament.name', read_only=True)
    current_golfer_count = serializers.IntegerField(read_only=True)
    display_name = serializers.CharField(read_only=True)
    is_full = serializers.BooleanField(read_only=True)
    available_spots = serializers.IntegerField(read_only=True)

    class Meta:
        model = Group
        fields = [
            'id', 'tournament', 'tournament_name', 'group_number', 'nickname',
            'max_golfers', 'current_golfer_count', 'display_name', 'is_full',
            'available_spots', 'created_at', 'updated_at'
        ]
        read_only_fields = ['group_number', 'created_at', 'updated_at']

    def create(self, validated_data):
        """Create a new group with auto-generated group_number"""
        # The group_number will be auto-generated by the model's save() method
        return super().create(validated_data)

    def validate_max_golfers(self, value):
        """Validate max_golfers is reasonable"""
        if value < 1 or value > 8:
            raise serializers.ValidationError("Maximum golfers must be between 1 and 8.")
        return value


class GolferSerializer(serializers.ModelSerializer):
    """Serializer for Golfer model"""
    full_name = serializers.CharField(read_only=True)
    age = serializers.IntegerField(read_only=True)
    group_name = serializers.CharField(source='group.display_name', read_only=True)
    tournament_name = serializers.CharField(source='tournament.name', read_only=True)

    class Meta:
        model = Golfer
        fields = [
            'id', 'golfer_id', 'first_name', 'last_name', 'full_name',
            'email', 'phone', 'date_of_birth', 'age', 'gender',
            'handicap', 'skill_level', 'preferred_tee',
            'group', 'group_name', 'tournament_name',
            'is_active', 'notes', 'created_at', 'updated_at'
        ]
        read_only_fields = ['created_at', 'updated_at']

    def validate_golfer_id(self, value):
        """Ensure golfer_id is unique"""
        if self.instance:
            # Exclude current instance when updating
            if Golfer.objects.exclude(pk=self.instance.pk).filter(golfer_id=value).exists():
                raise serializers.ValidationError("A golfer with this ID already exists.")
        else:
            # Check for uniqueness when creating
            if Golfer.objects.filter(golfer_id=value).exists():
                raise serializers.ValidationError("A golfer with this ID already exists.")
        return value

    def validate_handicap(self, value):
        """Validate handicap range"""
        if value is not None and (value < -10 or value > 54):
            raise serializers.ValidationError("Handicap must be between -10 and 54.")
        return value

    def validate_group(self, value):
        """Validate group assignment"""
        if value:
            # Check if group is full
            if value.is_full:
                # Allow if updating existing golfer in this group
                if self.instance and self.instance.group == value:
                    return value
                raise serializers.ValidationError("This group is full.")
        return value


class ShotSerializer(serializers.ModelSerializer):
    """Serializer for Shot model"""
    golfer_name = serializers.CharField(source='golfer.full_name', read_only=True)
    group_name = serializers.CharField(source='group.display_name', read_only=True)
    tournament_name = serializers.CharField(source='tournament.name', read_only=True)
    smash_factor = serializers.DecimalField(max_digits=4, decimal_places=2, read_only=True)

    class Meta:
        model = Shot
        fields = [
            'id', 'golfer', 'golfer_name', 'group_name', 'tournament_name',
            'shot_number', 'hole_number', 'shot_type', 'club_used',
            'ball_speed', 'club_head_speed', 'launch_angle', 'spin_rate',
            'carry_distance', 'total_distance', 'side_angle', 'smash_factor',
            'is_simulated', 'launch_monitor_id', 'notes', 'timestamp',
            'created_at', 'updated_at'
        ]
        read_only_fields = ['created_at', 'updated_at']

    def validate_hole_number(self, value):
        """Validate hole number range"""
        if value is not None and (value < 1 or value > 18):
            raise serializers.ValidationError("Hole number must be between 1 and 18.")
        return value

    def validate_ball_speed(self, value):
        """Validate ball speed is reasonable"""
        if value is not None and (value < 0 or value > 250):
            raise serializers.ValidationError("Ball speed must be between 0 and 250 mph.")
        return value

    def validate_club_head_speed(self, value):
        """Validate club head speed is reasonable"""
        if value is not None and (value < 0 or value > 200):
            raise serializers.ValidationError("Club head speed must be between 0 and 200 mph.")
        return value

    def validate_carry_distance(self, value):
        """Validate carry distance is reasonable"""
        if value is not None and (value < 0 or value > 500):
            raise serializers.ValidationError("Carry distance must be between 0 and 500 yards.")
        return value

    def validate_total_distance(self, value):
        """Validate total distance is reasonable"""
        if value is not None and (value < 0 or value > 600):
            raise serializers.ValidationError("Total distance must be between 0 and 600 yards.")
        return value


# Bulk operation serializers
class BulkDeleteSerializer(serializers.Serializer):
    """Serializer for bulk delete operations"""
    ids = serializers.ListField(
        child=serializers.IntegerField(),
        min_length=1,
        help_text="List of IDs to delete"
    )
    delete_children = serializers.BooleanField(
        default=False,
        help_text="Whether to delete related objects"
    )


class GroupAssignmentSerializer(serializers.Serializer):
    """Serializer for group assignment operations"""
    golfer_ids = serializers.ListField(
        child=serializers.IntegerField(),
        min_length=1,
        help_text="List of golfer IDs to assign"
    )
    group_id = serializers.IntegerField(help_text="Group ID to assign golfers to")

    def validate(self, data):
        """Validate group assignment"""
        group_id = data.get('group_id')
        golfer_ids = data.get('golfer_ids', [])

        try:
            group = Group.objects.get(id=group_id)
        except Group.DoesNotExist:
            raise serializers.ValidationError("Group does not exist.")

        # Check if group has enough space
        available_spots = group.available_spots
        if len(golfer_ids) > available_spots:
            raise serializers.ValidationError(
                f"Group only has {available_spots} available spots, "
                f"but you're trying to assign {len(golfer_ids)} golfers."
            )

        # Check if golfers exist
        existing_golfers = Golfer.objects.filter(id__in=golfer_ids)
        if existing_golfers.count() != len(golfer_ids):
            missing_ids = set(golfer_ids) - set(existing_golfers.values_list('id', flat=True))
            raise serializers.ValidationError(
                f"Golfers with IDs {list(missing_ids)} do not exist."
            )

        return data


# Nested serializers for detailed views
class GroupWithGolfersSerializer(GroupSerializer):
    """Group serializer with nested golfers"""
    golfers = GolferSerializer(many=True, read_only=True)

    class Meta(GroupSerializer.Meta):
        fields = GroupSerializer.Meta.fields + ['golfers']


class TournamentWithGroupsSerializer(TournamentSerializer):
    """Tournament serializer with nested groups"""
    groups = GroupSerializer(many=True, read_only=True)

    class Meta(TournamentSerializer.Meta):
        fields = TournamentSerializer.Meta.fields + ['groups']


class GolferWithShotsSerializer(GolferSerializer):
    """Golfer serializer with nested shots"""
    shots = ShotSerializer(many=True, read_only=True)
    shots_count = serializers.IntegerField(source='shots.count', read_only=True)

    class Meta(GolferSerializer.Meta):
        fields = GolferSerializer.Meta.fields + ['shots', 'shots_count']